{"version":3,"sources":["components/Navbar.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","id","className","href","style","color","Home","state","text","pattern","kmpTime","naiveTime","rabinTime","pm","setTimeout","_this","t0","window","performance","now","kmp","toFixed","t3","naive","t5","rabinKarp","setState","console","log","i","length","j","hash","charCodeAt","hpat","slice","textIndex","patternIndex","patternTable","prefix","S","p","handleText","e","target","value","handlePattern","htmlFor","type","name","placeholder","onChange","this","split","scope","Component","App","components_Navbar","components_Home","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5517c59.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Navbar=()=>{\r\n    return(\r\n        <div id=\"Navbar\">\r\n            <nav className=\"navbar navbar-light bg-dark\">\r\n                <div className=\"container\">\r\n                    <a className=\"navbar-brand\" href=\"/\">\r\n                    <center style={{color:\"white\"}}>Pattern Matching</center>\r\n                    </a>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n    state={\r\n        text:'',\r\n        pattern:'',\r\n        kmpTime:0,\r\n        naiveTime:0,\r\n        rabinTime:0\r\n    }\r\n\r\n    pm=()=>{\r\n        setTimeout(()=>{\r\n        if(this.state.pattern!=='' && this.state.text!==''){\r\n        \r\n        let t0=window.performance.now();\r\n        this.kmp(this.state.text,this.state.pattern)\r\n        let t1=window.performance.now();\r\n        let kmpTime=(t1-t0).toFixed(5)\r\n\r\n        let t3=window.performance.now()\r\n        this.naive(this.state.text,this.state.pattern)\r\n        let t4=window.performance.now()\r\n        let naiveTime=(t4-t3).toFixed(5)\r\n\r\n        let t5=window.performance.now()\r\n        this.rabinKarp(this.state.text,this.state.pattern)\r\n        let t6=window.performance.now()\r\n        let rabinTime=(t6-t5).toFixed(5)\r\n\r\n        this.setState({\r\n            kmpTime:kmpTime,\r\n            naiveTime:naiveTime,\r\n            rabinTime:rabinTime\r\n        })\r\n\r\n        console.log(naiveTime)\r\n\r\n        }\r\n            }\r\n        ,100)\r\n    }\r\n\r\n    // Naive Sthing Matching Algorithm\r\n    naive=(text,pattern)=>{\r\n        for(let i=0; i<=(text.length-pattern.length); i++){\r\n            let j;\r\n            for(j=0; j<pattern.length; j++){\r\n                if(text[i+j]!==pattern[j])break;\r\n            }\r\n            if(j===pattern.length){\r\n                //console.log(\"Pattern Matched at index: \"+i)\r\n                return i;   //Return the found index\r\n            }\r\n        }\r\n        return -1;      //-1 is not found\r\n    }\r\n\r\n    //Finding Hash Value for Rabin Karp algo\r\n    hash=(text)=>{\r\n        let hash=0;\r\n          for(let i=0; i<text.length;i++){\r\n              hash=hash+text.charCodeAt(i)\r\n          }\r\n          return hash;\r\n      }\r\n\r\n    //RabinKarp Sthing Matching Algorithm\r\n    rabinKarp=(text,pattern)=>{\r\n        let hpat=this.hash(pattern);\r\n        for(let i=0; i<=text.length-pattern.length; i++){\r\n            if(this.hash(text.slice(i,i+pattern.length))===hpat && this.naive(text.slice(i,i+pattern.length),pattern)>=0)return i;\r\n        }\r\n        return -1\r\n    }\r\n\r\n    //KMP algorithm\r\n    kmp=(text,pattern)=>{\r\n          let textIndex = 0;\r\n          let patternIndex = 0;\r\n        \r\n          const patternTable = this.prefix(pattern);\r\n        \r\n          while (textIndex < text.length) {\r\n            if (text[textIndex] === pattern[patternIndex]) {\r\n              // We've found a match.\r\n              if (patternIndex === pattern.length - 1) {\r\n                return (textIndex - pattern.length) + 1;\r\n              }\r\n              patternIndex += 1;\r\n              textIndex += 1;\r\n            } else if (patternIndex > 0) {\r\n              patternIndex = patternTable[patternIndex - 1];\r\n            } else {\r\n              patternIndex = 0;\r\n              textIndex += 1;\r\n            }\r\n          }\r\n        \r\n          return -1;\r\n    }\r\n\r\n    //findiPrefix Function\r\n    prefix=(S)=>{\r\n        const p=[];\r\n        p[0]=0;\r\n        let j=0;\r\n        for (let i = 1; i < S.length; i++) {\r\n            while (j > 0 && S[j] !== S[i])\r\n                j = p[j-1];\r\n    \r\n            if (S[j] === S[i])\r\n                j++;\r\n            p[i] = j;\r\n        }   \r\n        return p;\r\n    }\r\n\r\n    handleText=(e)=>{\r\n        this.setState({text:e.target.value})\r\n        this.pm()\r\n    }\r\n\r\n    handlePattern=(e)=>{\r\n        this.setState({pattern:e.target.value})\r\n        this.pm()\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"container\">\r\n                    <form>\r\n                        <div className=\"form-group textpattern\">\r\n                            <label htmlFor=\"text\">Text : </label>\r\n                            <input type=\"text\" className=\"form-control\" name=\"\" id=\"text\" placeholder=\"Enter Text\" onChange={this.handleText} />\r\n                            <label htmlFor=\"pattern\">Pattern : </label>\r\n                            <input type=\"text\" className=\"form-control\" name=\"\" id=\"pattern\" placeholder=\"Enter Pattern\" onChange={this.handlePattern} />\r\n                        </div>\r\n                    </form>\r\n\r\n                    {/* Displaying Text */}\r\n                    <p>{this.state.text}</p>\r\n                    <p>{this.state.pattern}</p>\r\n                    \r\n                   </div>\r\n                   \r\n                <hr/>\r\n                    <div className=\"container\">\r\n                        {/* Display text and pattern matched to it */}\r\n                        {this.state.text.split(this.state.pattern)}\r\n                    </div>\r\n\r\n                   <div className=\"container timeTable\">\r\n                        {/* Create Table to show Time taken by algorithms */}\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\">#</th>\r\n                                <th scope=\"col\">Algorithm</th>\r\n                                <th scope=\"col\">Time Taken</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <th scope=\"row\">1</th>\r\n                                <td>KMP algo</td>\r\n                                <td>{this.state.kmpTime}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th scope=\"row\">2</th>\r\n                                <td>Naive algo</td>\r\n                                <td>{this.state.naiveTime}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th scope=\"row\">3</th>\r\n                                <td>RabinKarp algo</td>\r\n                                <td>{this.state.rabinTime}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                   </div>\r\n            </div>\r\n        )}\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport Navbar from './components/Navbar.js'\r\nimport Home from './components/Home.js'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar />\r\n        <Home />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}